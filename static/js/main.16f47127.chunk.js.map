{"version":3,"sources":["components/Header.js","components/InfoCard.js","components/InfoCardContainer.js","components/Table.js","utils/index.js","components/LineChart.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Header","countries","country","onCountryChange","Grid","className","container","justify","style","marginTop","item","Typography","variant","FormControl","Select","value","onChange","e","target","MenuItem","map","index","key","name","InfoCard","title","cases","total","Card","CardContent","color","numeral","format","InfoCardContainer","countryData","setCasesType","casesType","spacing","xs","sm","md","onClick","todayCases","todayRecovered","recovered","todayDeaths","deaths","Table","flag","countryInfo","src","alt","casesTypeColors","halfOpacity","multiplier","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineChart","useState","setData","useEffect","axios","get","then","res","buildChartData","lastDataPoint","chartData","Object","keys","forEach","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","Map","center","zoom","TileLayer","attribution","url","Circle","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","showDataOnMap","App","setCountries","setCountry","setCountryData","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","a","iso2","sort","b","console","log","getCountriesData","catch","err","countryCode","Container","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.16f47127.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n} from '@material-ui/core';\nconst Header = ({ countries, country, onCountryChange }) => {\n  return (\n    <Grid\n      className='app__header'\n      container\n      justify='space-between'\n      style={{ marginTop: '2rem' }}\n    >\n      <Grid item>\n        <Typography variant='h4' className='app__logo'>\n          Covid-19 Tracker\n        </Typography>\n      </Grid>\n      <Grid item>\n        <FormControl className='app__dropdown'>\n          <Select\n            variant='outlined'\n            value={country}\n            onChange={(e) => onCountryChange(e.target.value)}\n          >\n            <MenuItem value='worldwide'>Worldwide</MenuItem>\n            {countries.map((country, index) => (\n              <MenuItem value={country.value} key={index}>\n                {country.name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Card, Typography, CardContent, Grid } from '@material-ui/core';\nimport numeral from 'numeral';\nfunction InfoCard({ title, cases, total }) {\n  return (\n    <Card>\n      <CardContent>\n        {/* Title */}\n        <Typography\n          className='infoCard__title'\n          variant='body1'\n          color='textPrimary'\n        >\n          {title}\n        </Typography>\n\n        {/* 1.2M total */}\n\n        <Typography className='infoCard__total' variant='h3'>\n          {numeral(total).format('0,0')}\n        </Typography>\n\n        {/* +120k Number of case */}\n\n        <Typography className='infoCard__cases'>\n          {numeral(cases).format('+0a')}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoCard;\n","import React from 'react';\nimport InfoCard from './InfoCard';\nimport { Grid } from '@material-ui/core';\nconst InfoCardContainer = ({ countryData, setCasesType, casesType }) => {\n  return (\n    <Grid container justify='space-between' spacing={2}>\n      <Grid\n        className={`infoCard__confirmed infoCard ${\n          casesType === 'cases' ? 'active' : ''\n        }`}\n        item\n        xs={12}\n        sm={4}\n        md={4}\n        onClick={() => setCasesType('cases')}\n      >\n        <InfoCard\n          title='Confirmed'\n          cases={countryData.todayCases}\n          total={countryData.cases}\n        ></InfoCard>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={4}\n        md={4}\n        className={`infoCard__recovered infoCard ${\n          casesType === 'recovered' ? 'active' : ''\n        }`}\n        onClick={() => setCasesType('recovered')}\n      >\n        <InfoCard\n          title='Recovered'\n          cases={countryData.todayRecovered}\n          total={countryData.recovered}\n        ></InfoCard>\n      </Grid>\n      <Grid\n        className={`infoCard__deaths infoCard ${\n          casesType === 'deaths' ? 'active' : ''\n        }`}\n        item\n        xs={12}\n        sm={4}\n        md={4}\n        onClick={() => setCasesType('deaths')}\n      >\n        <InfoCard\n          title='Deaths'\n          cases={countryData.todayDeaths}\n          total={countryData.deaths}\n        ></InfoCard>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default InfoCardContainer;\n","import React from 'react';\nimport numeral from 'numeral';\nconst Table = ({ countries }) => {\n  return (\n    <div className='app__table'>\n      <table>\n        <tbody>\n          {countries.map(({ country, cases, countryInfo: { flag } }) => (\n            <tr key={country}>\n              <td className='app__table-country'>\n                <img\n                  className='app__table-country-flag'\n                  src={flag}\n                  alt={country.country}\n                />\n                <span>{country}</span>\n              </td>\n              <td className='app__table-cases-number'>\n                {numeral(cases).format('0,0')}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","export const casesTypeColors = {\n  cases: {\n    color: '#fb9d02',\n    halfOpacity: 'rgba(251, 157, 2, 0.5)',\n    multiplier: 800,\n  },\n  recovered: {\n    color: '#65dd9b',\n    halfOpacity: 'rgba(101, 221, 155, 0.5)',\n\n    multiplier: 1200,\n  },\n  deaths: {\n    color: '#fb4443',\n    halfOpacity: 'rgba(251, 68, 67, 0.5)',\n    multiplier: 2000,\n  },\n};\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport axios from 'axios';\n\nimport { casesTypeColors } from '../utils/';\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label: (tooltipItem, data) => {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: (value, index, values) => {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst LineChart = ({ casesType }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    axios\n      .get('https://disease.sh/v3/covid-19/historical/all?lastdays=60')\n      .then((res) => res.data)\n      .then((data) => {\n        setData(buildChartData(data, casesType));\n      });\n  }, [casesType]);\n\n  const buildChartData = (data, casesType) => {\n    const chartData = [];\n    let lastDataPoint;\n\n    // loop through cases object keys\n\n    Object.keys(data[casesType]).forEach((date) => {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    });\n\n    return chartData;\n  };\n  return (\n    <div className='app__lineChart'>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                label: '# of Cases',\n                data: data,\n                backgroundColor: casesTypeColors[casesType].halfOpacity,\n                borderColor: casesTypeColors[casesType].color,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport { Card } from '@material-ui/core';\nimport './Map.scss';\n\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nimport { casesTypeColors } from '../utils/';\n\n// draw circle on the map\nexport const showDataOnMap = (countries, casesType = 'cases') =>\n  countries.map((country, index) => (\n    <Circle\n      key={index}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].color}\n      fillColor={casesTypeColors[casesType].color}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className='info-container'>\n          <div className='info-flag'>\n            <img src={country.countryInfo.flag} alt={country.country} />\n          </div>\n          <div className='info-name'> {country.country}</div>\n          <div className='info-confirmed'>\n            <span>Confirmed</span>\n            <span>{numeral(country.cases).format('0,0')}</span>\n          </div>\n\n          <div className='info-recovered'>\n            <span>Recovered</span>\n            <span>{numeral(country.recovered).format('0,0')}</span>\n          </div>\n          <div className='info-deaths'>\n            <span>Deaths</span>\n            <span>{numeral(country.deaths).format('0,0')}</span>\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n  return (\n    <Card className='app__map'>\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </Card>\n  );\n};\n\nexport default Map;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid, Card, CardContent } from '@material-ui/core';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport InfoCardContainer from './components/InfoCardContainer';\nimport Table from './components/Table';\nimport LineChart from './components/LineChart';\n\nimport Map from './components/Map';\nimport './App.scss';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryData, setCountryData] = useState({});\n  const [tableData, setTableData] = useState([]);\n  // const [isLoading, setIsLoading] = useState(true);\n  const [mapCenter, setMapCenter] = useState([0, 0]);\n  const [mapZoom, setMapZoom] = useState(1);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  // fetch countries from API\n  useEffect(() => {\n    const getCountriesData = async () => {\n      try {\n        const countries = await axios\n          .get('https://disease.sh/v3/covid-19/countries')\n          .then((res) => res.data);\n        setCountries(\n          countries.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }))\n        );\n        setTableData(countries.sort((a, b) => b.cases - a.cases));\n        setMapCountries(countries);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getCountriesData();\n  }, []);\n\n  // fetch data for selected country\n\n  useEffect(() => {\n    const url =\n      country === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${country}`;\n\n    axios(url)\n      .then((res) => res.data)\n      .then((data) => {\n        setCountryData(data);\n        // set long and lat of the map center\n        if (country !== 'worldwide') {\n          const { lat, long } = data.countryInfo;\n          setMapCenter([lat, long]);\n          setMapZoom(4);\n        } else {\n          setMapCenter([0, 0]);\n          setMapZoom(1);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [country]);\n\n  const onCountryChange = async (countryCode) => {\n    setCountry(countryCode);\n  };\n\n  return (\n    <Container className='app'>\n      <Header\n        countries={countries}\n        country={country}\n        onCountryChange={onCountryChange}\n      ></Header>\n      <Grid container spacing={2}>\n        <Grid item sm={12} md={8} className='app__left'>\n          <InfoCardContainer\n            setCasesType={setCasesType}\n            casesType={casesType}\n            countryData={countryData}\n          />\n\n          <Map\n            countries={mapCountries}\n            casesType={casesType}\n            center={mapCenter}\n            zoom={mapZoom}\n          ></Map>\n        </Grid>\n        <Grid item sm={12} md={4} className='app__right'>\n          <Card>\n            <CardContent>\n              <h3>Cases Info</h3>\n              {/* table */}\n              <Table countries={tableData} />\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '1rem' }}>\n            <CardContent>\n              {/* graph */}\n              <h3 style={{ marginBottom: '1rem' }}>Worldwide New Cases</h3>\n              <LineChart casesType={casesType} />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}